#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define ORIENTATION_CULLING 0
#define VIEW_FRUSTUM_CULLING 0
#define TOLERANCE -1.0
#define DISTANCE_CULLING 0
#define NUM_BUCKETS 5
#define MAX_DISTANCE 20.0

#define WIND_ENABLED 0
#define WIND_STRENGTH 8.0
#define WIND_FREQUENCY 1.0

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

// Storage buffers
layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;

layout(set = 3, binding = 0) uniform SphereData {
    vec4 positionRadius;
} sphere;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x * 34.0) + 1.0) * x);
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    vec2 i  = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod289(i);
    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));
    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    uint index = gl_GlobalInvocationID.x;
    if (index >= blades.length()) {
        return;
    }

    Blade blade = blades[index];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = normalize(blade.up.xyz);
    
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;
    
    // gravity
    // environmental gravity
    vec4 D = vec4(0.0, -1.0, 0.0, 9.8);
    vec3 gE = normalize(D.xyz) * D.w;
    
    // front gravity
    vec3 f = normalize(cross(up, vec3(sin(orientation), 0.0, cos(orientation)))); // front direction
    vec3 gF = (1.0 / 4.0) * length(gE) * f;
    
    // total gravity
    vec3 g = gE + gF;

    // recovery force
    vec3 iv2 = v0 + up * height; //initial v2
    vec3 r = (iv2 - v2) * stiffness;

    // wind
    vec3 w = vec3(0.0);
#if WIND_ENABLED
    const float PI = 3.14159265;
    vec2 wavePos = v0.xz * 0.05 + vec2(totalTime * 0.4, 0.0);
    float wave = sin(wavePos.x + snoise(wavePos * 0.8) * 2.0);
    
    float perlinR = snoise(v0.xz * 0.04 + totalTime * 0.3);
    float perlinG = snoise(v0.xz * 0.04 + vec2(100.0, 200.0) + totalTime * 0.3);
    
    float baseAngle = 0.4 * PI;
    float angleOffset = (perlinR - 0.5) * 1.0 * PI;
    float windAngle = baseAngle + angleOffset + wave * 0.3;
    
    vec3 windDir = normalize(vec3(cos(windAngle), 0.0, sin(windAngle)));
    
    float gust = 0.7 + 0.5 * sin(totalTime * 0.5);
    vec3 windForce = WIND_STRENGTH * 5.0 * gust * windDir * (0.5 + 0.5 * perlinG);
    windForce *= (0.8 + 0.2 * wave);

    float directionalAlign = 1.0 - abs(dot(normalize(windForce), normalize(v2 - v0)));
    float heightRatio = dot(v2 - v0, up) / height;
    w = heightRatio * directionalAlign * windForce;
#endif

    // extra credit: sphere
    vec3 sphereCenter = sphere.positionRadius.xyz;
    float sphereRadius = sphere.positionRadius.w;
    
    vec3 toSphere = v2 - sphereCenter;
    float distToSphere = length(toSphere);
    
    vec3 sphereForce = vec3(0.0);
    float sphererPushMagnitude = 50.0;
    if (distToSphere < sphereRadius * 2.0) {
        float pushStrength = 1.0 - (distToSphere / (sphereRadius * 2.0));
        pushStrength = pushStrength * pushStrength;
        sphereForce = normalize(toSphere) * pushStrength * sphererPushMagnitude;
    }

    //total force
    vec3 tv2 = (g + r + w + sphereForce) * deltaTime;
    vec3 v2new = v2 + tv2;
    
    //make v2 on the ground
    v2new = v2new - up * min(dot(up, v2new - v0), 0.0);

    //update V1 to maintain appropriate curvature of our Bezier curve
    float lproj = length(v2new - v0 - up * dot(v2new - v0, up));
    vec3 v1new = v0 + height * up * max(1.0 - (lproj / height), 0.05 * max(lproj / height, 1.0));

    //calculate the length of curve then update v1, v2 accordingly
    float L0 = distance(v0, v2new);
    float L1 = distance(v0, v1new) + distance(v1new, v2new);
    float n = 2.0;
    float L = (2.0 * L0 + (n - 1.0) * L1) / (n + 1.0);
    float r_scale = height / L;
    v1new = v0 + r_scale * (v1new - v0);
    v2new = v1new + r_scale * (v2new - v1new);

    blade.v1.xyz = v1new;
    blade.v2.xyz = v2new;
    blades[index] = blade;

    // TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    bool visible = true;
    
#if ORIENTATION_CULLING
    vec3 camPos = inverse(camera.view)[3].xyz;
    vec3 viewDir = normalize(v0 - camPos);
    
    if (abs(dot(viewDir, f)) < 0.9) {
        visible = false;
    }
#endif

#if VIEW_FRUSTUM_CULLING
    vec3 m = 0.25 * v0 + 0.5 * v1new + 0.25 * v2new;
    
    vec4 v0_clip = camera.proj * camera.view * vec4(v0, 1.0);
    float h0 = v0_clip.w + TOLERANCE;
    bool isV0inBounds = inBounds(v0_clip.x, h0) && inBounds(v0_clip.y, h0);
    
    vec4 v2_clip = camera.proj * camera.view * vec4(v2new, 1.0);
    float h2 = v2_clip.w + TOLERANCE;
    bool isV2inBounds = inBounds(v2_clip.x, h2) && inBounds(v2_clip.y, h2);
    
    vec4 m_clip = camera.proj * camera.view * vec4(m, 1.0);
    float hm = m_clip.w + TOLERANCE;
    bool isMinBounds = inBounds(m_clip.x, hm) && inBounds(m_clip.y, hm);
    
    if (!isV0inBounds && !isV2inBounds && !isMinBounds) {
        visible = false;
    }
#endif

#if DISTANCE_CULLING
    vec3 camPos = inverse(camera.view)[3].xyz;
    vec3 camToV0 = v0 - camPos;
    vec3 upProj = up * dot(camToV0, up);
    float d_proj = length(camToV0 - upProj);
    
    if (index % NUM_BUCKETS < NUM_BUCKETS * (d_proj / MAX_DISTANCE)) {
        visible = false;
    }
#endif
    
    if (visible) {
        culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
    }
}
